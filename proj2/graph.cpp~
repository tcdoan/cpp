// Implementaion of the Graph abstract data type. 
#include "graph.h"

// Graph constructor
// For each node v store a vector of edges from that vertix v.
Graph::Graph(int vertices) : vertices(vertices), edges(0)
{
  adj = new vector<Edge>[vertices];
  for (int v = 0; v < vertices;  ++v)
    {
      adj[v] = vector<Edge>();
    }
}

// Deallocate heap memory pointed by adj
Graph::~Graph()
{
  delete [] adj;
}


// return number of vertices
int Graph::V() const 
{
  return vertices;
}

// return number of the vertices
int Graph::E() const
{
  return edges;
}

// add an edge from vertex edge.v to edge.w
// for undirected graph edge.w to edge.v is also added
void Graph::addEdge(Edge edge)
{
  // Constructor make sure
  //    adj !=null
  //    and adj[e.v] is alreay initialized
  //    end adj[e.w] is alreay initialized
  adj[edge.v].push_back(edge);
  adj[edge.w].push_back(edge);
  ++edges;
}

// return all edges linking vertex v with other vertex 
const vector<Edge>& Graph::AdjList(int v) const
{
  return adj[v];
}

// implement the output operator for Graph ADT. 
ostream& operator<<(ostream& os, const Graph& g)
{
  // for each vertex x
  for (int x = 0; x < g.V(); x++)
    {
      os << x << ": ";
      for (const Edge& edge : g.adj[x])
	{
	  os << edge;
	}
      os << endl;
    }
  return os;
}

